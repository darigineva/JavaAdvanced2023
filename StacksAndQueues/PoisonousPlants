package JAVA.JAVA_ADVANCED.StackAndQueue;

import java.util.*;

public class PoisonousPlants {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        int[] plants = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        ArrayDeque<Integer> initialStack = new ArrayDeque<>();
        ArrayDeque<Integer> survivedStack = new ArrayDeque<>();
        for (int i = 0; i < plants.length; i++) {
            initialStack.push(plants[i]);
        }
        reduce(initialStack, survivedStack, initialStack.size(), 0);
    }
    private static void reduce(ArrayDeque<Integer> initialStack, ArrayDeque<Integer> survivedStack, int size, int days) {
        while (initialStack.size() > 1){
            int last = initialStack.peek();
            if(initialStack.pop() <= initialStack.peek()){
                survivedStack.push(last);
            }
        }
        if(initialStack.size() == 1){
            survivedStack.push(initialStack.pop());
        }
        if(survivedStack.size() != size) {
            for(int element: survivedStack){
                initialStack.push(survivedStack.pop());
            }
            size = initialStack.size();
            days++;
            reduce(initialStack, survivedStack, size, days);
        } else {
            if(days == - 1){
                System.out.println(1);
                return;
            }
            System.out.println(days);
        }
    }
}
